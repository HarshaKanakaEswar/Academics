#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Circuit Analysis Using Sympy
\end_layout

\begin_layout Author
EE16B014
\begin_inset Newline newline
\end_inset

G.HARSHA KANAKA ESWAR
\end_layout

\begin_layout Date
April 06,2018
\end_layout

\begin_layout Abstract
There are many types of filters present ahvailable.
 such asFIR Filters,IIR Filters,High-pass,Low-pass,Band-pass,Stop-band,Notch,Com
b Filter,All-pass,etc....IN the above filters we are going to discuss two filters.
\begin_inset Newline newline
\end_inset

They are:
\end_layout

\begin_layout Abstract
1)
\shape italic
Low pass filter
\end_layout

\begin_layout Abstract
2)
\shape italic
high pass filter
\shape default

\begin_inset Newline newline
\end_inset

Here we will use symbolic python for writing the transfer function directly
 as a matrix with Frequency 
\shape italic
's
\shape default
' as a variable so that we can get the magnitude plot of transfer function
 and ,its response to different inputs of having different frequencies.
\end_layout

\begin_layout Section*
1 Lowpass Filter:
\end_layout

\begin_layout Standard
In this section We have the low pass filter equation in the form of matrix,which
 we will solve using symbolic python with matrix inversion.
\end_layout

\begin_layout Standard
The equation is given as:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\left(\begin{array}{cccc}
0 & 0 & 1 & -\frac{1}{G}\\
-\frac{1}{1+sR_{2}C_{2}} & 1 & 0 & 0\\
0 & -A_{0} & A_{0} & 1\\
-\frac{1}{R_{1}}-\frac{1}{R_{2}}-sC1 & \frac{1}{R_{2}} & 0 & sC1
\end{array}\right)\left(\begin{array}{c}
V_{1}\\
V_{p}\\
V_{m}\\
V_{0}
\end{array}\right)=\begin{pmatrix}0\\
0\\
0\\
\frac{V_{i}(s)}{R_{1}}
\end{pmatrix}
\]

\end_inset


\begin_inset Newline newline
\end_inset

We now use the function 'Matrix' in sympy to create two matrices A,b -cofficient
 matrix and source matrix Inside a function named as lowpass where there
 a variable 's' which is declared using symbols.
\end_layout

\begin_layout LyX-Code
def lowpass(R1,R2,C1,C2,G,Vi,Ao):
\end_layout

\begin_layout LyX-Code
       
\end_layout

\begin_layout LyX-Code
        A= Matrix([[0,0,1,-1/G],[-1/(1+s*R2*C2),1,0,0],[0,-Ao,Ao,1], 
\backslash

\end_layout

\begin_layout LyX-Code
           [-(1/R1)-(1/R2)-(s*C1),1/R2,0,s*C1]])
\end_layout

\begin_layout LyX-Code
        b= Matrix([0,0,0,-(Vi/(R1))])
\end_layout

\begin_layout LyX-Code
        print (A)
\end_layout

\begin_layout LyX-Code
        print (b)
\end_layout

\begin_layout LyX-Code
        V=A.inv()*b
\end_layout

\begin_layout LyX-Code
        print (V)
\end_layout

\begin_layout LyX-Code
        return (A,b,V)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
The above function takes the input values for constants and gives out 
\shape italic

\begin_inset Formula $V_{o}(s)$
\end_inset


\shape default
 as the output along with A,b matrices.So we got the output equation interms
 of 
\shape italic
's'(Frequency).
\shape default

\begin_inset Newline newline
\end_inset

We can see the plot of magnitude of H(s) , by defining 'hf' using lambdif
 and array of frequencies(w) in log scale using logspace and 'ss' as jw
 then plotting hf(ss) vs w.
\begin_inset Foot
status open

\begin_layout Plain Layout
H(jw),H(s) mean the same.(s=jw)
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
A,b,V=lowpass(10**4,10**4,10**-11,10**-11,1.586,1,1000)
\end_layout

\begin_layout LyX-Code
Vo=V[3]
\end_layout

\begin_layout LyX-Code
w=p.logspace(0,8,801)
\end_layout

\begin_layout LyX-Code
ss=1j*w
\end_layout

\begin_layout LyX-Code
hf=lambdify(s,Vo,'numpy')
\end_layout

\begin_layout LyX-Code
v=hf(ss)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
p.loglog(w,abs(v))
\end_layout

\begin_layout LyX-Code
p.xlabel('w')
\end_layout

\begin_layout LyX-Code
p.ylabel('|H(jw)|')
\end_layout

\begin_layout LyX-Code
p.title('magnitude of lowpass filter in loglog scale')
\end_layout

\begin_layout LyX-Code
p.grid(True)
\end_layout

\begin_layout LyX-Code
p.show()
\end_layout

\begin_layout Standard
And the plot looks like:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename hf.png
	scale 75

\end_inset


\begin_inset Newline newline
\end_inset

Since we got 
\shape italic

\begin_inset Formula $V_{o}(s)$
\end_inset


\shape default
 we will now define a function called coff to get the cofficients of 's'
 in numerator and denominator to define transfer function H(s),using the
 cofficients.
\end_layout

\begin_layout LyX-Code
def coff(Vo):
\end_layout

\begin_layout LyX-Code
	Vo=simplify(Vo)
\end_layout

\begin_layout LyX-Code
	N,D=fraction(Vo)
\end_layout

\begin_layout LyX-Code
	As=simplify(N)
\end_layout

\begin_layout LyX-Code
	bs=simplify(D)
\end_layout

\begin_layout LyX-Code
	As1=Poly(As,s)
\end_layout

\begin_layout LyX-Code
	bs1=Poly(bs,s)
\end_layout

\begin_layout LyX-Code
	print (As1,bs1)
\end_layout

\begin_layout LyX-Code
	Num=As1.all_coeffs()
\end_layout

\begin_layout LyX-Code
	Den=bs1.all_coeffs()
\end_layout

\begin_layout LyX-Code
	Num1=list(map(float,Num))
\end_layout

\begin_layout LyX-Code
	Den1=list(map(float,Den)) 
\end_layout

\begin_layout LyX-Code
	return Num1,Den1     
\end_layout

\begin_layout Standard
After getting cofficients using above function H(s) is given as:
\end_layout

\begin_layout LyX-Code
H=sp.lti(Num1,Den1)
\end_layout

\begin_layout Subsection*
1.1 Step Response:
\end_layout

\begin_layout Standard
The response of the system to input step function is known as step response.So
 we give input step which is nothing but one when the time is greater than
 zero.
 So we define 'u(t)' with function ones.
\end_layout

\begin_layout LyX-Code
def u(t):
\end_layout

\begin_layout LyX-Code
         return p.ones(len(t))     
\end_layout

\begin_layout Standard
Since we got H(s),u(t) lets get the step response By using sp.lsim from scipy
\end_layout

\begin_layout LyX-Code
H=sp.lti(Num1,Den1)
\end_layout

\begin_layout LyX-Code
t=p.linspace(0,0.0001,3000)
\end_layout

\begin_layout LyX-Code
                
\end_layout

\begin_layout LyX-Code
t,y,svec=sp.lsim(H,u(t),t)
\end_layout

\begin_layout LyX-Code
p.plot(t,y)
\end_layout

\begin_layout LyX-Code
p.xlabel('t-->')
\end_layout

\begin_layout LyX-Code
p.ylabel('Vo(t)')
\end_layout

\begin_layout LyX-Code
p.title('step response for low pass filter')
\end_layout

\begin_layout LyX-Code
p.show()
\end_layout

\begin_layout Standard
Now we plot the graph of step response :
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename steplow.png
	scale 75

\end_inset


\begin_inset Newline newline
\end_inset

u(t) is nothing but a signal of frequency '0'.As we Can See the response
 is just an amplification of the u(t),the Amplification is due to gain of
 'u(t)' which is nearly 1.58, which can be seen from the magnitude plot of
 H(s).
\begin_inset Foot
status open

\begin_layout Plain Layout
Gain of a response at zero frequency is called as DC gain
\end_layout

\end_inset

.
\begin_inset Newline newline
\end_inset

At t=0 instant u(t) can be taken as very high frequency because of its sudden
 change in value from 0 to at t=0, which makes the output zero at zero for
 lowpass fiter.We can also observe a small ripple at zero,it is just because
 of gibbs phenomena,its magnitude depends on quality factor of H(s).
\end_layout

\begin_layout Subsection*
1.2 Output for an input sine wave:
\end_layout

\begin_layout Standard
Lets now take input combination of two sinusoids of frequencies: 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none

\begin_inset Formula $2$
\end_inset

×
\begin_inset Formula $10$
\end_inset


\begin_inset Formula $^{3}$
\end_inset

,
\begin_inset Formula $2\text{×}10^{6}$
\end_inset

 as show below:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
v_{i}(t)=(sin(2000πt)+cos(2\text{×}10^{6}πt))u_{0}(t)Volts
\]

\end_inset


\begin_inset Newline newline
\end_inset

We can find the output in a simlar method as we have done step response,with
 a small change.
 just replace the function 'u(t)' in the above case with 'x(t)', which is
 defined for the above input.
\end_layout

\begin_layout LyX-Code
def x(t):
\end_layout

\begin_layout LyX-Code
         return p.sin(2000*(p.pi)*t)+p.cos(2*1e10*(p.pi)*t)
\end_layout

\begin_layout LyX-Code
t1=p.linspace(0,0.002,10000)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
t1,y2,svec=sp.lsim(H,x(t1),t1)
\end_layout

\begin_layout LyX-Code
p.xlabel('t-->')
\end_layout

\begin_layout LyX-Code
p.ylabel('Vo(t)')
\end_layout

\begin_layout LyX-Code
p.title('Response of low pass filter for input sin(2000*(pi)*t)+cos(2*1e6*(pi)*t)
')
\end_layout

\begin_layout LyX-Code
p.plot(t1,y2)
\end_layout

\begin_layout LyX-Code
p.show()
\end_layout

\begin_layout Standard
Now lets see the plot of output for various t1's:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename sinlow1.png
	scale 75

\end_inset


\begin_inset Newline newline
\end_inset

As we can see its like a sinusoid with some thickness, and the frequency
 of the sine wave is '2000'.But observe the amplitude of the wave its around
 '3' but gain of sinusoid of frequency is just 1.5.OK now lets take a close
 look of whats happening 
\begin_inset Newline newline
\end_inset

Now lets get more inference by decreasing the value of 't1'.
\end_layout

\begin_layout LyX-Code
                          t1=p.linspace(0,0.00001,10000)
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename sinlow2.png
	scale 75

\end_inset


\begin_inset Newline newline
\end_inset

Now we are able to see an anthore sinusiod, Which is the cause of thickness
 in the first output we saw,Which means both sinusiod frequencies are passed
 at the output successfully.Thus it makes sense of amplitude greater than
 one sinusoid gain,because of two sinusoid outputs.
\end_layout

\begin_layout Subsection*
1.3 Conclusions:
\end_layout

\begin_layout Itemize
Thus we got see that how low pass is allowing the DC signals like u(t) which
 was seen at calculation of step response.
\end_layout

\begin_layout Itemize
And the sinusiods are passed freely to the output because of the gain observed
 from H(s) graph is greater than '1',thus telling that those two frequencies
 are low for H(s),and allowed to pass.
\end_layout

\begin_layout Itemize
And the peek seen in the step response is due to gibbs phenomena,depends
 mainly on quality factor of H(s)
\end_layout

\begin_layout Section*
2 Highpass filter:
\end_layout

\begin_layout Standard
In the above case we have clearly discussed about using Sympy ,Lowpass filter
 and its Characteristics,Now we will discusss about HighPass filter and
 its response to different inputs.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

~
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset

We have the circuit equation in the form of matrix equation as shown below
 which is solved by similar code used for Lowpass filter:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\left(\begin{array}{cccc}
0 & 0 & 1 & -\frac{1}{G}\\
-\frac{sR_{3}C_{2}}{1+sR_{3}C_{2}} & 1 & 0 & 0\\
0 & -A_{0} & A_{0} & 1\\
-\frac{1}{R_{1}}-sC_{2}-sC_{1} & sC_{2} & 0 & sC_{1}
\end{array}\right)\left(\begin{array}{c}
V_{1}\\
V_{p}\\
V_{m}\\
V_{0}
\end{array}\right)=\begin{pmatrix}0\\
0\\
0\\
V_{i}(s)*sC_{1}
\end{pmatrix}
\]

\end_inset


\begin_inset Newline newline
\end_inset

The Equation is simalir to the Lowpass in some fashion that 
\begin_inset Formula $R_{1}$
\end_inset

replaced by 
\begin_inset Formula $\frac{1}{sC_{1}}$
\end_inset

 and viceversa,
\begin_inset Formula $R_{2}$
\end_inset

replaced by 
\begin_inset Formula $\frac{1}{sC_{2}}$
\end_inset

 and 
\begin_inset Formula $\frac{1}{sC_{2}}$
\end_inset

 by
\begin_inset Formula $R_{3}$
\end_inset

.Thats just because of the circuit where the similar replacement we can see
 that some resistors replaced by capcitors and capacitors by resistors.
\begin_inset Newline newline
\end_inset

Ok now lets see the code for solving this:
\end_layout

\begin_layout LyX-Code
def highpass(R1,R3,C1,C2,G,Vi,Ao):
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
        A= Matrix([[0,0,1,-1/G],[-((s*C2*R3))/(1+(s*C2*R3)),1,0,0],[0,-Ao,Ao,1],
 
\backslash

\end_layout

\begin_layout LyX-Code
            [-(s*C1)-(s*C2)-(1/R1),s*C2,0,1/R1]])
\end_layout

\begin_layout LyX-Code
        b= Matrix([0,0,0,-(Vi*(s*C1))])
\end_layout

\begin_layout LyX-Code
        print (A)
\end_layout

\begin_layout LyX-Code
        print (b)
\end_layout

\begin_layout LyX-Code
        V=A.inv()*b
\end_layout

\begin_layout LyX-Code
        print (V)
\end_layout

\begin_layout LyX-Code
        return (A,b,V)
\end_layout

\begin_layout Standard
There is not more new things to explain here as we already saw getting coffecien
ts from 
\begin_inset Formula $V_{o}$
\end_inset

and getting its transfer function by scipy.
\begin_inset Newline newline
\end_inset

Here is the code:
\end_layout

\begin_layout LyX-Code
A,b,V=highpass(10**4,10**4,10**-9,10**-9,1.586,1,1000)
\end_layout

\begin_layout LyX-Code
Vo=V[3]
\end_layout

\begin_layout LyX-Code
w=p.logspace(0,8,801)
\end_layout

\begin_layout LyX-Code
ss=1j*w
\end_layout

\begin_layout LyX-Code
hf=lambdify(s,Vo,'numpy')
\end_layout

\begin_layout LyX-Code
v=hf(ss)
\end_layout

\begin_layout LyX-Code
p.loglog(w,abs(v))
\end_layout

\begin_layout LyX-Code
p.xlabel('log(w)')
\end_layout

\begin_layout LyX-Code
p.ylabel('log(|H(jw)|)')
\end_layout

\begin_layout LyX-Code
p.title('magnitude of highpass filter in loglog scale')
\end_layout

\begin_layout LyX-Code
p.grid(True)
\end_layout

\begin_layout LyX-Code
p.show()
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
So lets take a direct look at the graph of 
\shape italic
magnitude of
\shape default
 
\shape italic
highpass vs frequency
\shape default
 and get inferences:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename highmagnitude.png
	scale 75

\end_inset


\begin_inset Newline newline
\end_inset

So from seeing the graph we can directly conclude that this filter doesn't
 all low frequencies,and passes all frequencies above some limit with a
 constant gain.
\end_layout

\begin_layout Subsection*
2.1 Step Response:
\end_layout

\begin_layout Standard
As we have discussed earlier the response of system to step is called as
 step response.
\begin_inset Newline newline
\end_inset

Lets see the code first and then the graph:
\end_layout

\begin_layout LyX-Code
def u(t):
\end_layout

\begin_layout LyX-Code
         return p.ones(len(t)) 
\end_layout

\begin_layout LyX-Code
   
\end_layout

\begin_layout LyX-Code
H=sp.lti(Num1,Den1)
\end_layout

\begin_layout LyX-Code
t=p.linspace(0,0.0001,300)
\end_layout

\begin_layout LyX-Code
t,y,svec=sp.lsim(H,u(t),t)
\end_layout

\begin_layout LyX-Code
p.plot(t,y)
\end_layout

\begin_layout LyX-Code
p.xlabel('t-->')
\end_layout

\begin_layout LyX-Code
p.ylabel('Vo(t)')
\end_layout

\begin_layout LyX-Code
p.title('step response for highpass filter')
\end_layout

\begin_layout LyX-Code
p.show()
\end_layout

\begin_layout Standard
Here is the Output graph:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename stephigh.png
	scale 75

\end_inset


\begin_inset Newline newline
\end_inset

Lets take a close look at graph it seems that at zero the output has some
 gain near to 1.5 and the amplitude became nearly zero in steady state.This
 is because of the reasons that we have already known, They are at zero
 u(t) is acting like high frequecy wave.
 So it will get the gain of 1.5 but as the time becomes greater than zero
 its just a dc signal with frequency zero,For which the high pass has a
 very least which doesn't allow the signal to pass at all.
\end_layout

\begin_layout Subsubsection*
2.2 Output for a Damped sinusoid:
\end_layout

\begin_layout Standard
Lets take a damped sinsusoid example as shown below:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
V_{i}(s)=(e^{-1000t})*sin(10^{5}\Pi t)
\]

\end_inset


\begin_inset Newline newline
\end_inset

Here the signal is taken in such a way that it is passed by the highpass
 filter ,So that we can see the graph passed as a whole and decrease of
 amplitude is observed as time increases not because of H(s)(i.e, System)
 But because of the damping 
\begin_inset Formula $e^{-1000t}$
\end_inset

.
\begin_inset Newline newline
\end_inset

Here is the Code:
\end_layout

\begin_layout LyX-Code
def x(t):
\end_layout

\begin_layout LyX-Code
         return (e**(-1000*t))*sin(100000*pi*t)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
t1=p.linspace(0,0.0012,5000)
\end_layout

\begin_layout LyX-Code
t1,y2,svec=sp.lsim(H,x(t1),t1)
\end_layout

\begin_layout LyX-Code
p.xlabel('t-->')
\end_layout

\begin_layout LyX-Code
p.ylabel('Vo(t)')
\end_layout

\begin_layout LyX-Code
p.title('Response of highpass filter for input (e**(-10*t))*sin(200000*pi*t)')
\end_layout

\begin_layout LyX-Code
p.plot(t1,y2)
\end_layout

\begin_layout LyX-Code
p.show()
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
It is done in the simalar fashion to lowpass,i.e just by defining a function
 x(t).
\begin_inset Newline newline
\end_inset

Lets take a look at the graph:
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename damp_response_high.png
	scale 75

\end_inset


\begin_inset Newline newline
\end_inset

It just came like the input just amuktiplication factor of 1.5 is applied
 ,which can be seen as the gain from the system.So the damping is just because
 of the exponential with negative power infront of sinusoid.
\end_layout

\begin_layout Subsection*
2.3 Conclusions:
\end_layout

\begin_layout Itemize
The step Response of the system is having some value at zero time, which
 is eventually going to zero because of its zero frequency and highpass
 nature of the filter.
\end_layout

\begin_layout Itemize
The damping sinusoid has no effect due to filter except some gain ,but its
 main is due to its own exponent power multiplying it.
\end_layout

\end_body
\end_document
